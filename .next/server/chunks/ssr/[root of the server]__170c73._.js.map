{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/spick/OneDrive/Desktop/cnc-tool-generator/src/pages/tool/mmk-creator.js"],"sourcesContent":["\"use client\";\r\nimport { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nexport default function MMKCreator() {\r\n  const router = useRouter();\r\n  const [workpieceNumber, setWorkpieceNumber] = useState(\"\");\r\n  const [operations, setOperations] = useState(1);\r\n  const [op1, setOp1] = useState(\"\");\r\n  const [op2, setOp2] = useState(\"\");\r\n  const [flowDirection, setFlowDirection] = useState(\"left-to-right\");\r\n  const [mmkHeader, setMmkHeader] = useState(\"\");\r\n  const [step, setStep] = useState(1); // Controls which part of the form is visible\r\n  const [toolCount, setToolCount] = useState(0);\r\n  const [currentToolIndex, setCurrentToolIndex] = useState(0);\r\n  const [tools, setTools] = useState([]);\r\n  const [mm100Text, setMm100Text] = useState(\"\"); // ✅ Add this line\r\n\r\n\r\n\r\n\r\n  // Move to next step\r\n  const nextStep = () => setStep(step + 1);\r\n\r\n  // Automatically store header and move forward\r\n  const storeHeaderAndContinue = () => {\r\n    const lowerOp = Number(op1);\r\n    const higherOp = operations === 2 ? Number(op2) : null;\r\n\r\n    let mm1Text, mm100Text;\r\n\r\n    // ✅ Swap lower/higher operations based on direction\r\n    if (flowDirection === \"left-to-right\") {\r\n        mm1Text = `[MM1]\\nTEXT=\"OP${lowerOp} ${workpieceNumber}\"\\n;\\n`;\r\n        mm100Text = operations === 2 ? `[MM100]\\nTEXT=\"OP${higherOp} ${workpieceNumber}\"\\n;\\n` : \"\";\r\n    } else {\r\n        mm1Text = `[MM1]\\nTEXT=\"OP${higherOp} ${workpieceNumber}\"\\n;\\n`;\r\n        mm100Text = `[MM100]\\nTEXT=\"OP${lowerOp} ${workpieceNumber}\"\\n;\\n`;\r\n    }\r\n\r\n    setMm100Text(mm100Text);\r\n    setMmkHeader(`[MM0]\\nTEXT=\"${workpieceNumber}\"\\n;\\n` + mm1Text);\r\n    nextStep();\r\n};\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center p-6\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">MMK Creator</h1>\r\n\r\n      {/* Step 1: Ask for Workpiece Number */}\r\n      {step === 1 && (\r\n        <div className=\"w-full max-w-md\">\r\n          <label className=\"block text-lg mb-2\">Enter Workpiece Number:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={workpieceNumber}\r\n            onChange={(e) => setWorkpieceNumber(e.target.value)}\r\n            className=\"w-full p-2 border rounded-md mb-4\"\r\n          />\r\n          <button onClick={nextStep} className=\"bg-blue-500 text-white px-4 py-2 rounded-md\">\r\n            Next\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Step 2: Ask if 1 or 2 Operations */}\r\n      {step === 2 && (\r\n        <div className=\"w-full max-w-md\">\r\n          <label className=\"block text-lg mb-2\">How many operations?</label>\r\n          <select\r\n            value={operations}\r\n            onChange={(e) => setOperations(Number(e.target.value))}\r\n            className=\"w-full p-2 border rounded-md mb-4\"\r\n          >\r\n            <option value={1}>1 Operation</option>\r\n            <option value={2}>2 Operations</option>\r\n          </select>\r\n          <button onClick={nextStep} className=\"bg-blue-500 text-white px-4 py-2 rounded-md\">\r\n            Next\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Step 3: Ask for Operation Numbers */}\r\n      {step === 3 && (\r\n        <div className=\"w-full max-w-md\">\r\n          <label className=\"block text-lg mb-2\">Enter First Operation Number:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={op1}\r\n            onChange={(e) => setOp1(e.target.value)}\r\n            className=\"w-full p-2 border rounded-md mb-4\"\r\n          />\r\n\r\n          {operations === 2 && (\r\n            <>\r\n              <label className=\"block text-lg mb-2\">Enter Second Operation Number:</label>\r\n              <input\r\n                type=\"text\"\r\n                value={op2}\r\n                onChange={(e) => setOp2(e.target.value)}\r\n                className=\"w-full p-2 border rounded-md mb-4\"\r\n              />\r\n            </>\r\n          )}\r\n\r\n          <button onClick={nextStep} className=\"bg-blue-500 text-white px-4 py-2 rounded-md\">\r\n            Next\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Step 4: Ask for Machining Flow */}\r\n      {step === 4 && (\r\n        <div className=\"w-full max-w-md\">\r\n          <label className=\"block text-lg mb-2\">Machining Flow:</label>\r\n          <select\r\n            value={flowDirection}\r\n            onChange={(e) => setFlowDirection(e.target.value)}\r\n            className=\"w-full p-2 border rounded-md mb-4\"\r\n          >\r\n            <option value=\"left-to-right\">Left to Right</option>\r\n            <option value=\"right-to-left\">Right to Left</option>\r\n          </select>\r\n          <button onClick={storeHeaderAndContinue} className=\"bg-blue-500 text-white px-4 py-2 rounded-md\">\r\n            Next\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n\r\n      {/* Step 6: Ask how many tools for the lower operation */}\r\n      {step === 5 && (\r\n        <div className=\"w-full max-w-md\">\r\n            <label className=\"block text-lg mb-2\">\r\n            How many tools are used for OP{op1}?\r\n            </label>\r\n            <input\r\n            type=\"number\"\r\n            min=\"1\"\r\n            value={toolCount}\r\n            onChange={(e) => setToolCount(Number(e.target.value))}\r\n            className=\"w-full p-2 border rounded-md mb-4\"\r\n            />\r\n            <button\r\n            onClick={(e) => {\r\n                setTools([]);\r\n                nextStep(); // Move to OP1 Tool Input (Step 7)\r\n                \r\n            }}\r\n            className=\"bg-blue-500 text-white px-4 py-2 rounded-md\"\r\n            >\r\n            Next\r\n            </button>\r\n        </div>\r\n        )}\r\n\r\n        {step === 5.2 && (\r\n        <div className=\"w-full max-w-md\">\r\n            <label className=\"block text-lg mb-2\">\r\n            How many tools are used for OP{op2}?\r\n            </label>\r\n            <input\r\n            type=\"number\"\r\n            min=\"1\"\r\n            value={toolCount}\r\n            onChange={(e) => {\r\n                setToolCount(Number(e.target.value));\r\n            }}            \r\n            \r\n            className=\"w-full p-2 border rounded-md mb-4\"\r\n            />\r\n            <button\r\n            onClick={() => {\r\n                setTools([...tools]); // Keep OP1 tools\r\n                setCurrentToolIndex(0); // Reset index for OP2 tools\r\n                setStep(6.2); // Move to OP2 Tool Input\r\n\r\n            }}\r\n            className=\"bg-blue-500 text-white px-4 py-2 rounded-md\"\r\n            >\r\n            Next\r\n            </button>\r\n        </div>\r\n        )}\r\n\r\n\r\n      {/* Step 6+6.2: Tool Details Input */}\r\n      {((step === 6 && currentToolIndex < toolCount) || (step === 6.2 && currentToolIndex < toolCount)) && (\r\n        <div className=\"w-full max-w-md\">\r\n\r\n            <h2 className=\"text-xl font-semibold mb-4\">\r\n                Tool {currentToolIndex + 1} for OP{step === 6 ? op1 : op2}\r\n            </h2>\r\n\r\n\r\n            {/* Tool Number Input */}\r\n            <div className=\"mb-4\">\r\n            <label className=\"block text-lg mb-2\">Tool Number:</label>\r\n            <input\r\n                type=\"text\"\r\n                className=\"w-full p-2 border rounded-md\"\r\n                onChange={(e) => {\r\n                const updatedTools = [...tools];\r\n                updatedTools[currentToolIndex] = { ...updatedTools[currentToolIndex], toolNumber: e.target.value };\r\n                setTools(updatedTools);\r\n                }}\r\n            />\r\n            </div>\r\n\r\n            {/* Display Text Input */}\r\n            <div className=\"mb-4\">\r\n            <label className=\"block text-lg mb-2\">Display Text (Cut Type & Nominal):</label>\r\n            <input\r\n                type=\"text\"\r\n                className=\"w-full p-2 border rounded-md\"\r\n                onChange={(e) => {\r\n                const updatedTools = [...tools];\r\n                updatedTools[currentToolIndex] = { ...updatedTools[currentToolIndex], displayText: e.target.value };\r\n                setTools(updatedTools);\r\n                }}\r\n            />\r\n            </div>\r\n\r\n            {/* Cutting Edge (D Number) */}\r\n            <div className=\"mb-4\">\r\n            <label className=\"block text-lg mb-2\">Cutting Edge (D Number, Default: 1):</label>\r\n            <input\r\n                type=\"number\"\r\n                min=\"1\"\r\n                defaultValue=\"1\"\r\n                className=\"w-full p-2 border rounded-md\"\r\n                onChange={(e) => {\r\n                const updatedTools = [...tools];\r\n                updatedTools[currentToolIndex] = {\r\n                    ...updatedTools[currentToolIndex],\r\n                    cuttingEdge: e.target.value || \"1\" // Default to 1 if empty\r\n                };\r\n                setTools(updatedTools);\r\n                }}\r\n            />\r\n            </div>\r\n\r\n            {/* Axis (V Number) Selection */}\r\n                <div className=\"mb-4\">\r\n                <label className=\"block text-lg mb-2\">Select Axis (V Number):</label>\r\n                <select\r\n                    className=\"w-full p-2 border rounded-md\"\r\n                    onChange={(e) => {\r\n                    const updatedTools = [...tools];\r\n                    updatedTools[currentToolIndex] = { \r\n                        ...updatedTools[currentToolIndex], \r\n                        axis: e.target.value // Stores only 1, 2, or 3\r\n                    };\r\n                    setTools(updatedTools);\r\n                    }}\r\n                >   \r\n                    <option value=\"\">Select Axis</option>\r\n                    <option value=\"1\">X / 1</option>\r\n                    <option value=\"2\">Z / 2</option>\r\n                    <option value=\"3\">Y / 3</option>\r\n                </select>\r\n                </div>\r\n\r\n\r\n            {/* Next Tool Button */}\r\n            <button\r\n            onClick={() => {\r\n                setCurrentToolIndex(currentToolIndex + 1);\r\n\r\n                if (currentToolIndex + 1 === toolCount) {\r\n                    const op = step === 6 ? op1 : op2;\r\n                    const toolOffset = step === 6 ? 2 : 101; // OP2 should start from MM100\r\n\r\n                   // ✅ Flip tool assignment for Right-to-Left direction\r\n                      const sortedTools = flowDirection === \"right-to-left\" \r\n                      ? tools.reverse() \r\n                      : tools;\r\n\r\n                      const formattedToolData = sortedTools\r\n                      .filter(tool => tool) // Ensure no undefined tools\r\n                      .map((tool, index) => {\r\n                          const chanValue = flowDirection === \"left-to-right\" \r\n                              ? (op === op1 ? 1 : 2)  // ✅ L → R: OP1 → Chan 1, OP2 → Chan 2\r\n                              : (op === op1 ? 2 : 1);  // ✅ R → L: OP1 → Chan 2, OP2 → Chan 1\r\n\r\n                          return `[MM${index + toolOffset}]\\nTEXT=\"${tool.displayText || \"\"}\"\\nChan=${chanValue}\\nT=T${tool.toolNumber || \"?\"}_OP${op} D${tool.cuttingEdge || 1} V${tool.axis || \"?\"}\\nFAKTOR=100\\n;`;\r\n                      }).join(\"\\n\");\r\n\r\n\r\n    \r\n                        setMmkHeader((prevHeader) => {\r\n                          let updatedHeader = prevHeader + formattedToolData; // ✅ Use formattedToolData properly\r\n                          \r\n                          if (operations === 2 && step === 6) {\r\n                              updatedHeader += `\\n${mm100Text}\\n`;\r\n                          }\r\n                          \r\n                          return updatedHeader;\r\n                      });\r\n                      \r\n                        \r\n                        \r\n                        \r\n                        \r\n                \r\n                    if (operations === 2 && step === 6) {\r\n                        setStep(5.2); // Move to OP2 Tool Count\r\n                    } else {\r\n                        setStep(7); // Move to MMK Display\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }}\r\n            className=\"bg-blue-500 text-white px-4 py-2 rounded-md\"\r\n            >\r\n            Next Tool\r\n            </button>\r\n        </div>\r\n        )}\r\n\r\n\r\n\r\n    {/* Step 8: Show MMK with Proper Notepad++ Formatting */}\r\n    {step === 7 && (\r\n        <div className=\"w-full max-w-md\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">MMK Program ✅</h2>\r\n            <textarea\r\n            className=\"w-full p-4 border rounded-md font-mono text-sm\"\r\n            rows=\"15\"\r\n            readOnly\r\n            value={`${mmkHeader.trim()}\\n\\n; Standard MMK Section\\n;`}\r\n            ></textarea>\r\n            <button\r\n            onClick={() => navigator.clipboard.writeText(mmkHeader)}\r\n            className=\"bg-green-500 text-white px-4 py-2 mt-4 rounded-md\"\r\n            >\r\n            Copy MMK Program\r\n            </button>\r\n            <button\r\n            onClick={() => router.push(`/`)}\r\n            className=\"w-full bg-blue-500 text-white px-6 py-3 rounded-lg text-lg hover:bg-blue-600 transition\"\r\n          >\r\n            Home\r\n          </button>\r\n            \r\n\r\n        </div>\r\n        )}\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 708, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}